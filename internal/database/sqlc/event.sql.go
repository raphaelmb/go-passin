// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: event.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createEvent = `-- name: CreateEvent :exec
INSERT INTO events(title, details, slug, maximum_attendees) VALUES($1, $2, $3, $4)
`

type CreateEventParams struct {
	Title            string
	Details          string
	Slug             string
	MaximumAttendees int32
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.ExecContext(ctx, createEvent,
		arg.Title,
		arg.Details,
		arg.Slug,
		arg.MaximumAttendees,
	)
	return err
}

const getEventByID = `-- name: GetEventByID :one
SELECT e.id, e.title, e.details, e.slug, e.maximum_attendees, e.created_at, e.updated_at, COUNT(a) as attendees FROM events e
JOIN attendees a
ON e.id = a.event_id
WHERE e.id = $1
GROUP BY e.id
`

type GetEventByIDRow struct {
	ID               uuid.UUID
	Title            string
	Details          string
	Slug             string
	MaximumAttendees int32
	CreatedAt        time.Time
	UpdatedAt        time.Time
	Attendees        int64
}

func (q *Queries) GetEventByID(ctx context.Context, id uuid.UUID) (GetEventByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getEventByID, id)
	var i GetEventByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Details,
		&i.Slug,
		&i.MaximumAttendees,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Attendees,
	)
	return i, err
}

const getEventBySlug = `-- name: GetEventBySlug :one
SELECT id, title, details, slug, maximum_attendees, created_at, updated_at FROM events WHERE slug = $1
`

func (q *Queries) GetEventBySlug(ctx context.Context, slug string) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEventBySlug, slug)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Details,
		&i.Slug,
		&i.MaximumAttendees,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const registerForEvent = `-- name: RegisterForEvent :exec
INSERT INTO attendees(name, email, event_id) VALUES($1, $2, $3)
`

type RegisterForEventParams struct {
	Name    string
	Email   string
	EventID uuid.UUID
}

func (q *Queries) RegisterForEvent(ctx context.Context, arg RegisterForEventParams) error {
	_, err := q.db.ExecContext(ctx, registerForEvent, arg.Name, arg.Email, arg.EventID)
	return err
}
