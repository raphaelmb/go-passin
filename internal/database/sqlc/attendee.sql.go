// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: attendee.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countAttendeesByEvent = `-- name: CountAttendeesByEvent :one
SELECT COUNT(*) FROM attendees WHERE event_id = $1
`

func (q *Queries) CountAttendeesByEvent(ctx context.Context, eventID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAttendeesByEvent, eventID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAttendeeBadge = `-- name: GetAttendeeBadge :one
SELECT a.id, a.name, a.email, a.created_at, a.updated_at, a.event_id, e.title FROM attendees a
JOIN events e
ON a.event_id = e.id
WHERE a.id = $1
`

type GetAttendeeBadgeRow struct {
	ID        int32
	Name      string
	Email     string
	CreatedAt time.Time
	UpdatedAt time.Time
	EventID   uuid.UUID
	Title     string
}

func (q *Queries) GetAttendeeBadge(ctx context.Context, id int32) (GetAttendeeBadgeRow, error) {
	row := q.db.QueryRowContext(ctx, getAttendeeBadge, id)
	var i GetAttendeeBadgeRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EventID,
		&i.Title,
	)
	return i, err
}

const getAttendeeByEmail = `-- name: GetAttendeeByEmail :one
SELECT id, name, email, created_at, updated_at, event_id FROM attendees WHERE email = $1 AND event_id = $2
`

type GetAttendeeByEmailParams struct {
	Email   string
	EventID uuid.UUID
}

func (q *Queries) GetAttendeeByEmail(ctx context.Context, arg GetAttendeeByEmailParams) (Attendee, error) {
	row := q.db.QueryRowContext(ctx, getAttendeeByEmail, arg.Email, arg.EventID)
	var i Attendee
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EventID,
	)
	return i, err
}
